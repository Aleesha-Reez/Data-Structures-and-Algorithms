package Homework;

public class hw_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = {6,5,3,1,8,7,2,4};
		System.out.println(findKthLargest(arr, 2));
	}
	/* Q1
	 * Given an array nums, write a function to find the first maximum value's index. 
	 * If there is no index that satisfies the conditions in the problem statement, we should return -1.
	 * Input: [3,5,6,2,1,9] Output: 5
	 * Explanation: 9 is the maximum value, and its index is 5.
	 
	 * Input: [2,4,4,1] Output: 1
	 * Explanation: 4 is the maximum value, and the first 4's index is 1.
	 */
	
	public int maxIndex(int[] arr) {
		int maxIndex = 0;
		for(int i = 0; i < arr.length; i++) {
			if(arr[i] > arr[maxIndex])
				maxIndex = i;
		}
		return maxIndex;
	}
	
	




	
	/* Q2
	 * Kth Largest Element in an Array
	 * Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.
	 * Input: [3,2,1,5,6,4] and k = 2
	 * Output: 5
	 
	 * Input: [3,2,3,1,2,4,5,5,6] and k = 4
	 * Output: 4
	 */

    public static int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int left = 0, right = nums.length - 1;
        while(true) {
            int pos = partition(nums, left, right);
            if (pos + 1 == k) {
                return nums[pos];
            } else if (pos + 1 < k) {
                left = pos + 1;
            } else {
                right = pos - 1;
            }
        }
    }
    
    public static int partition(int[] nums, int left, int right) {
        int pivot = nums[left];
        int l = left + 1;
        int r = right;
        while (l <= r) {
            if (nums[l] < pivot && nums[r] > pivot) {
                swap(nums, l++, r--);
            } else if (nums[l] >= pivot) {
                l++;
            } else if (nums[r] <= pivot) {
                r--;
            }
        }
        swap(nums, left, r);
        return r;
    }
    
    public static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    } 

    
    
    /* Q3
     * Given an array of integers, return index of the two numbers such that they add up to a specific target.
     * You may assume that each input would have exactly one solution, and you may not use the same element twice.
     
     * Example:
     * Given nums = [2, 7, 11, 15], target = 9,
     * Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].
     */
    
    public int[] twoSum(int[] nums, int target) {
        int[] arr = new int[2];
        for(int i = 0;i < nums.length;i++) {
            for(int j = i+1;j < nums.length; j++) {
                if(nums[i] + nums[j] == target) {
                    arr[0] = i;
                    arr[1] = j;
                }
            }
        }
        return arr;
    }
    
    
    
    /* Q4
 	 * Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.
	 * s = "leetcode" return 0. 
	 * s = "loveleetcode" return 2.
     */
    
    public static int firstUniqChar(String s) {
		for(int i = 0; i < s.length(); i++) {
			int j = 0;
			for (; j < s.length(); ) {
				if(s.charAt(j) != s.charAt(i) || j == i)
					j++;
	    		if(j == s.length())
	    			return i;
				if(s.charAt(j) == s.charAt(i) && j != i) {
					break;
				}
			}
		}
		return -1;
 }
    
    
    
    /* Q5
     * Say you have an array for which the ith element is the price of a given stock on day i.
     * If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.
     * Note that you cannot sell a stock before you buy one.
     * 
     * Example:
     * Input: [7,1,5,3,6,4]
     * Output: 5
     * Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.
     */
    
    public int maxProfit(int[] prices) {
        int maxProfit = 0;
        int minPrices = Integer.MAX_VALUE;
        for(int i = 0; i < prices.length; i++){
            if(prices[i] < minPrices){
                minPrices = prices[i];
            }
            maxProfit = Math.max(maxProfit, prices[i] - minPrices);
        }
        return maxProfit;
    }

}





